File;Line Number;Original Code;Mutated Code;Is Killed?;Broken Tests
src/contracts/core/AVSDirectory.sol;47;") external initializer";") external";False;""
src/contracts/core/AVSDirectory.sol;69;"operatorSignature.expiry >= block.timestamp";"operatorSignature.expiry < block.timestamp";False;""
src/contracts/core/AVSDirectory.sol;73;"avsOperatorStatus[msg.sender][operator] != OperatorAVSRegistrationStatus.REGISTERED";"avsOperatorStatus[msg.sender][operator] == OperatorAVSRegistrationStatus.REGISTERED";False;""
src/contracts/core/AVSDirectory.sol;119;"avsOperatorStatus[msg.sender][operator] == OperatorAVSRegistrationStatus.REGISTERED";"avsOperatorStatus[msg.sender][operator] != OperatorAVSRegistrationStatus.REGISTERED";False;""
src/contracts/core/AVSDirectory.sol;177;"block.chainid == ORIGINAL_CHAIN_ID";"block.chainid != ORIGINAL_CHAIN_ID";False;""
src/contracts/core/AVSDirectory.sol;19;"uint8 internal constant PAUSED_OPERATOR_REGISTER_DEREGISTER_TO_AVS = 0;";"uint8 internal constant PAUSED_OPERATOR_REGISTER_DEREGISTER_TO_AVS = 1;";True;"test_revert_whenRegisterDeregisterToAVSPaused()"
src/contracts/core/AVSDirectory.sol;67;") external onlyWhenNotPaused(PAUSED_OPERATOR_REGISTER_DEREGISTER_TO_AVS)";") external";True;"test_revert_whenRegisterDeregisterToAVSPaused()"
src/contracts/core/AVSDirectory.sol;116;"onlyWhenNotPaused(PAUSED_OPERATOR_REGISTER_DEREGISTER_TO_AVS)";"";True;"test_revert_whenRegisterDeregisterToAVSPaused()"
src/contracts/core/StrategyManager.sol;32;"uint8 internal constant PAUSED_DEPOSITS = 0;";"uint8 internal constant PAUSED_DEPOSITS = 1;";False;""
src/contracts/core/StrategyManager.sol;86;") external initializer";") external";False;""
src/contracts/core/StrategyManager.sol;108;") external onlyWhenNotPaused(PAUSED_DEPOSITS) nonReentrant returns (uint256 shares)";") external  nonReentrant returns (uint256 shares)";False;""
src/contracts/core/StrategyManager.sol;108;") external onlyWhenNotPaused(PAUSED_DEPOSITS) nonReentrant returns (uint256 shares)";") external onlyWhenNotPaused(PAUSED_DEPOSITS)  returns (uint256 shares)";False;""
src/contracts/core/StrategyManager.sol;140;") external onlyWhenNotPaused(PAUSED_DEPOSITS) nonReentrant returns (uint256 shares)";") external  nonReentrant returns (uint256 shares)";False;""
src/contracts/core/StrategyManager.sol;140;") external onlyWhenNotPaused(PAUSED_DEPOSITS) nonReentrant returns (uint256 shares)";") external onlyWhenNotPaused(PAUSED_DEPOSITS)  returns (uint256 shares)";False;""
src/contracts/core/StrategyManager.sol;145;"expiry >= block.timestamp";"expiry < block.timestamp";False;""
src/contracts/core/StrategyManager.sol;150;"nonce + 1";"nonce - 1";False;""
src/contracts/core/StrategyManager.sol;169;"function removeShares(address staker, IStrategy strategy, uint256 shares) external onlyDelegationManager";"function removeShares(address staker, IStrategy strategy, uint256 shares) external";False;""
src/contracts/core/StrategyManager.sol;179;") external onlyDelegationManager";") external";False;""
src/contracts/core/StrategyManager.sol;189;") external onlyDelegationManager";") external";False;""
src/contracts/core/StrategyManager.sol;200;"function setThirdPartyTransfersForbidden(IStrategy strategy, bool value) external onlyStrategyWhitelister";"function setThirdPartyTransfersForbidden(IStrategy strategy, bool value) external";False;""
src/contracts/core/StrategyManager.sol;208;"function setStrategyWhitelister(address newStrategyWhitelister) external onlyOwner";"function setStrategyWhitelister(address newStrategyWhitelister) external";False;""
src/contracts/core/StrategyManager.sol;220;") external onlyStrategyWhitelister";") external";False;""
src/contracts/core/StrategyManager.sol;222;"strategiesToWhitelist.length == thirdPartyTransfersForbiddenValues.length";"strategiesToWhitelist.length != thirdPartyTransfersForbiddenValues.length";False;""
src/contracts/core/StrategyManager.sol;228;"!strategyIsWhitelistedForDeposit[strategiesToWhitelist[i]]";"strategyIsWhitelistedForDeposit[strategiesToWhitelist[i]]";False;""
src/contracts/core/StrategyManager.sol;245;"onlyStrategyWhitelister";"";False;""
src/contracts/core/StrategyManager.sol;276;"staker != address(0)";"staker == address(0)";False;""
src/contracts/core/StrategyManager.sol;277;"shares != 0";"shares == 0";False;""
src/contracts/core/StrategyManager.sol;280;"stakerStrategyShares[staker][strategy] == 0";"stakerStrategyShares[staker][strategy] != 0";False;""
src/contracts/core/StrategyManager.sol;282;"stakerStrategyList[staker].length < MAX_STAKER_STRATEGY_LIST_LENGTH";"stakerStrategyList[staker].length > MAX_STAKER_STRATEGY_LIST_LENGTH";False;""
src/contracts/core/StrategyManager.sol;289;"stakerStrategyShares[staker][strategy] += shares";"stakerStrategyShares[staker][strategy] -= shares";False;""
src/contracts/core/StrategyManager.sol;308;") internal onlyStrategiesWhitelistedForDeposit(strategy) returns (uint256 shares)";") internal  returns (uint256 shares)";False;""
src/contracts/core/StrategyManager.sol;334;"shareAmount != 0";"shareAmount == 0";False;""
src/contracts/core/StrategyManager.sol;339;"shareAmount <= userShares";"shareAmount > userShares";False;""
src/contracts/core/StrategyManager.sol;342;"userShares - shareAmount";"userShares + shareAmount";False;""
src/contracts/core/StrategyManager.sol;349;"userShares == 0";"userShares != 0";False;""
src/contracts/core/StrategyManager.sol;369;"stakerStrategyList[staker][j] == strategy";"stakerStrategyList[staker][j] != strategy";False;""
src/contracts/core/StrategyManager.sol;371;"stakerStrategyList[staker].length - 1";"stakerStrategyList[staker].length + 1";False;""
src/contracts/core/StrategyManager.sol;379;"j != stratsLength";"j == stratsLength";False;""
src/contracts/core/StrategyManager.sol;433;"block.chainid == ORIGINAL_CHAIN_ID";"block.chainid != ORIGINAL_CHAIN_ID";False;""
src/contracts/core/StrategyManager.sol;39;"msg.sender == strategyWhitelister";"msg.sender != strategyWhitelister";True;""
src/contracts/core/DelegationManager.sol;29;"uint8 internal constant PAUSED_NEW_DELEGATION = 0;";"uint8 internal constant PAUSED_NEW_DELEGATION = 1;";False;""
src/contracts/core/DelegationManager.sol;32;"uint8 internal constant PAUSED_ENTER_WITHDRAWAL_QUEUE = 1;";"uint8 internal constant PAUSED_ENTER_WITHDRAWAL_QUEUE = 2;";False;""
src/contracts/core/DelegationManager.sol;35;"uint8 internal constant PAUSED_EXIT_WITHDRAWAL_QUEUE = 2;";"uint8 internal constant PAUSED_EXIT_WITHDRAWAL_QUEUE = 3;";False;""
src/contracts/core/DelegationManager.sol;41;"(180 days) / 12";"(180 days) * 12";False;""
src/contracts/core/DelegationManager.sol;84;") external initializer";") external";False;""
src/contracts/core/DelegationManager.sol;191;"stakerSignatureAndExpiry.expiry >= block.timestamp";"stakerSignatureAndExpiry.expiry < block.timestamp";False;""
src/contracts/core/DelegationManager.sol;204;"currentStakerNonce + 1";"currentStakerNonce - 1";False;""
src/contracts/core/DelegationManager.sol;221;"onlyWhenNotPaused(PAUSED_ENTER_WITHDRAWAL_QUEUE)";"";False;""
src/contracts/core/DelegationManager.sol;226;"staker != address(0)";"staker == address(0)";False;""
src/contracts/core/DelegationManager.sol;239;"msg.sender != staker";"msg.sender == staker";False;""
src/contracts/core/DelegationManager.sol;248;"strategies.length == 0";"strategies.length != 0";False;""
src/contracts/core/DelegationManager.sol;280;"onlyWhenNotPaused(PAUSED_ENTER_WITHDRAWAL_QUEUE)";"";False;""
src/contracts/core/DelegationManager.sol;288;"queuedWithdrawalParams[i].strategies.length == queuedWithdrawalParams[i].shares.length";"queuedWithdrawalParams[i].strategies.length != queuedWithdrawalParams[i].shares.length";False;""
src/contracts/core/DelegationManager.sol;292;"queuedWithdrawalParams[i].withdrawer == msg.sender";"queuedWithdrawalParams[i].withdrawer != msg.sender";False;""
src/contracts/core/DelegationManager.sol;329;") external onlyWhenNotPaused(PAUSED_EXIT_WITHDRAWAL_QUEUE) nonReentrant";") external  nonReentrant";False;""
src/contracts/core/DelegationManager.sol;329;") external onlyWhenNotPaused(PAUSED_EXIT_WITHDRAWAL_QUEUE) nonReentrant";") external onlyWhenNotPaused(PAUSED_EXIT_WITHDRAWAL_QUEUE)";False;""
src/contracts/core/DelegationManager.sol;347;") external onlyWhenNotPaused(PAUSED_EXIT_WITHDRAWAL_QUEUE) nonReentrant";") external  nonReentrant";False;""
src/contracts/core/DelegationManager.sol;347;") external onlyWhenNotPaused(PAUSED_EXIT_WITHDRAWAL_QUEUE) nonReentrant";") external onlyWhenNotPaused(PAUSED_EXIT_WITHDRAWAL_QUEUE)";False;""
src/contracts/core/DelegationManager.sol;366;") external onlyStrategyManagerOrEigenPodManager";") external";False;""
src/contracts/core/DelegationManager.sol;389;") external onlyStrategyManagerOrEigenPodManager";") external";False;""
src/contracts/core/DelegationManager.sol;409;"function setMinWithdrawalDelayBlocks(uint256 newMinWithdrawalDelayBlocks) external onlyOwner";"function setMinWithdrawalDelayBlocks(uint256 newMinWithdrawalDelayBlocks) external";False;""
src/contracts/core/DelegationManager.sol;423;") external onlyOwner";") external";False;""
src/contracts/core/DelegationManager.sol;440;"newOperatorDetails.stakerOptOutWindowBlocks <= MAX_STAKER_OPT_OUT_WINDOW_BLOCKS";"newOperatorDetails.stakerOptOutWindowBlocks > MAX_STAKER_OPT_OUT_WINDOW_BLOCKS";False;""
src/contracts/core/DelegationManager.sol;444;"newOperatorDetails.stakerOptOutWindowBlocks >= _operatorDetails[operator].stakerOptOutWindowBlocks";"newOperatorDetails.stakerOptOutWindowBlocks < _operatorDetails[operator].stakerOptOutWindowBlocks";False;""
src/contracts/core/DelegationManager.sol;469;") internal onlyWhenNotPaused(PAUSED_NEW_DELEGATION)";") internal";False;""
src/contracts/core/DelegationManager.sol;477;"_delegationApprover != address(0) && msg.sender != _delegationApprover && msg.sender != operator";"_delegationApprover != address(0) || msg.sender != _delegationApprover || msg.sender != operator";False;""
src/contracts/core/DelegationManager.sol;477;"msg.sender != operator";"msg.sender == operator";False;""
src/contracts/core/DelegationManager.sol;480;"approverSignatureAndExpiry.expiry >= block.timestamp";"approverSignatureAndExpiry.expiry < block.timestamp";False;""
src/contracts/core/DelegationManager.sol;547;"withdrawal.startBlock + minWithdrawalDelayBlocks <= block.number";"withdrawal.startBlock + minWithdrawalDelayBlocks > block.number";False;""
src/contracts/core/DelegationManager.sol;547;"withdrawal.startBlock + minWithdrawalDelayBlocks";"withdrawal.startBlock - minWithdrawalDelayBlocks";False;""
src/contracts/core/DelegationManager.sol;552;"msg.sender == withdrawal.withdrawer";"msg.sender != withdrawal.withdrawer";False;""
src/contracts/core/DelegationManager.sol;556;"receiveAsTokens";"!receiveAsTokens";False;""
src/contracts/core/DelegationManager.sol;558;"tokens.length == withdrawal.strategies.length";"tokens.length != withdrawal.strategies.length";False;""
src/contracts/core/DelegationManager.sol;566;"receiveAsTokens";"!receiveAsTokens";False;""
src/contracts/core/DelegationManager.sol;571;"withdrawal.startBlock + strategyWithdrawalDelayBlocks[withdrawal.strategies[i]] <= block.number";"withdrawal.startBlock + strategyWithdrawalDelayBlocks[withdrawal.strategies[i]] > block.number";False;""
src/contracts/core/DelegationManager.sol;571;"withdrawal.startBlock + strategyWithdrawalDelayBlocks[withdrawal.strategies[i]]";"withdrawal.startBlock - strategyWithdrawalDelayBlocks[withdrawal.strategies[i]]";False;""
src/contracts/core/DelegationManager.sol;592;"withdrawal.startBlock + strategyWithdrawalDelayBlocks[withdrawal.strategies[i]]";"withdrawal.startBlock - strategyWithdrawalDelayBlocks[withdrawal.strategies[i]]";False;""
src/contracts/core/DelegationManager.sol;592;"withdrawal.startBlock + strategyWithdrawalDelayBlocks[withdrawal.strategies[i]] <= block.number";"withdrawal.startBlock + strategyWithdrawalDelayBlocks[withdrawal.strategies[i]] > block.number";False;""
src/contracts/core/DelegationManager.sol;600;"withdrawal.strategies[i] == beaconChainETHStrategy";"withdrawal.strategies[i] != beaconChainETHStrategy";False;""
src/contracts/core/DelegationManager.sol;610;"podOwnerOperator != address(0)";"podOwnerOperator == address(0)";False;""
src/contracts/core/DelegationManager.sol;622;"currentOperator != address(0)";"currentOperator == address(0)";False;""
src/contracts/core/DelegationManager.sol;643;"operatorShares[operator][strategy] += shares";"operatorShares[operator][strategy] -= shares";False;""
src/contracts/core/DelegationManager.sol;650;"operatorShares[operator][strategy] -= shares";"operatorShares[operator][strategy] += shares";False;""
src/contracts/core/DelegationManager.sol;667;"staker != address(0)";"staker == address(0)";False;""
src/contracts/core/DelegationManager.sol;669;"strategies.length != 0";"strategies.length == 0";False;""
src/contracts/core/DelegationManager.sol;675;"operator != address(0)";"operator == address(0)";False;""
src/contracts/core/DelegationManager.sol;686;"strategies[i] == beaconChainETHStrategy";"strategies[i] != beaconChainETHStrategy";False;""
src/contracts/core/DelegationManager.sol;742;"strategy == beaconChainETHStrategy";"strategy != beaconChainETHStrategy";False;""
src/contracts/core/DelegationManager.sol;802;"block.chainid == ORIGINAL_CHAIN_ID";"block.chainid != ORIGINAL_CHAIN_ID";False;""
src/contracts/core/DelegationManager.sol;867;"podShares <= 0";"podShares > 0";False;""
src/contracts/core/DelegationManager.sol;874;"strategyManagerStrats.length == 0";"strategyManagerStrats.length != 0";False;""
src/contracts/core/DelegationManager.sol;884;"strategyManagerStrats.length + 1";"strategyManagerStrats.length - 1";False;""
src/contracts/core/DelegationManager.sol;898;"strategies.length - 1";"strategies.length + 1";False;""
src/contracts/core/DelegationManager.sol;899;"strategies.length - 1";"strategies.length + 1";False;""
src/contracts/core/DelegationManager.sol;751;"_minWithdrawalDelayBlocks <= MAX_WITHDRAWAL_DELAY_BLOCKS";"_minWithdrawalDelayBlocks > MAX_WITHDRAWAL_DELAY_BLOCKS";True;""
src/contracts/core/DelegationManager.sol;767;"_strategies.length == _withdrawalDelayBlocks.length";"_strategies.length != _withdrawalDelayBlocks.length";True;""
src/contracts/core/DelegationManager.sol;776;"newStrategyWithdrawalDelayBlocks <= MAX_WITHDRAWAL_DELAY_BLOCKS";"newStrategyWithdrawalDelayBlocks > MAX_WITHDRAWAL_DELAY_BLOCKS";True;"test_Revert_WhenExitWithdrawalQueuePaused(), test_Revert_WhenInvalidWithdrawalRoot(), test_Revert_WhenNotCalledByWithdrawer(), test_Revert_WhenTokensArrayLengthMismatch(), test_Revert_WhenWithdrawalDelayBlocksNotPassed(uint256[], bool), test_Revert_WhenWithdrawalDelayBlocksNotPassed_BeaconStrat(uint256, uint256, uint256), test_completeQueuedWithdrawal_SingleStratWithdrawAsShares(address, uint256, uint256), test_completeQueuedWithdrawal_SingleStratWithdrawAsTokens(address, uint256, uint256)"
src/contracts/core/DelegationManager.sol;914;"currWithdrawalDelay > withdrawalDelay";"currWithdrawalDelay < withdrawalDelay";True;"test_Revert_WhenInvalidWithdrawalRoot(), test_completeQueuedWithdrawal_SingleStratWithdrawAsShares(address, uint256, uint256), test_completeQueuedWithdrawal_SingleStratWithdrawAsTokens(address, uint256, uint256)"