File;Line Number;Original Code;Mutated Code;Is Killed?;Broken Tests
src/contracts/core/AVSDirectory.sol;45;") external initializer";") external";False;""
src/contracts/core/AVSDirectory.sol;67;"operatorSignature.expiry >= block.timestamp";"operatorSignature.expiry < block.timestamp";False;""
src/contracts/core/AVSDirectory.sol;71;"avsOperatorStatus[msg.sender][operator] != OperatorAVSRegistrationStatus.REGISTERED";"avsOperatorStatus[msg.sender][operator] == OperatorAVSRegistrationStatus.REGISTERED";False;""
src/contracts/core/AVSDirectory.sol;112;"avsOperatorStatus[msg.sender][operator] == OperatorAVSRegistrationStatus.REGISTERED";"avsOperatorStatus[msg.sender][operator] != OperatorAVSRegistrationStatus.REGISTERED";False;""
src/contracts/core/AVSDirectory.sol;172;"block.chainid == ORIGINAL_CHAIN_ID";"block.chainid != ORIGINAL_CHAIN_ID";False;""
src/contracts/core/AVSDirectory.sol;19;"uint8 internal constant PAUSED_OPERATOR_REGISTER_DEREGISTER_TO_AVS = 0;";"uint8 internal constant PAUSED_OPERATOR_REGISTER_DEREGISTER_TO_AVS = 1;";True;"test_revert_whenRegisterDeregisterToAVSPaused()"
src/contracts/core/AVSDirectory.sol;64;") external onlyWhenNotPaused(PAUSED_OPERATOR_REGISTER_DEREGISTER_TO_AVS)";") external";True;"test_revert_whenRegisterDeregisterToAVSPaused()"
src/contracts/core/AVSDirectory.sol;110;"function deregisterOperatorFromAVS(address operator) external onlyWhenNotPaused(PAUSED_OPERATOR_REGISTER_DEREGISTER_TO_AVS)";"function deregisterOperatorFromAVS(address operator) external";True;"test_revert_whenRegisterDeregisterToAVSPaused()"
src/contracts/core/StrategyManager.sol;32;"uint8 internal constant PAUSED_DEPOSITS = 0;";"uint8 internal constant PAUSED_DEPOSITS = 1;";False;""
src/contracts/core/StrategyManager.sol;54;"msg.sender == address(delegation)";"msg.sender != address(delegation)";False;""
src/contracts/core/StrategyManager.sol;87;") external initializer";") external";False;""
src/contracts/core/StrategyManager.sol;109;") external onlyWhenNotPaused(PAUSED_DEPOSITS) nonReentrant returns (uint256 shares)";") external  nonReentrant returns (uint256 shares)";False;""
src/contracts/core/StrategyManager.sol;109;") external onlyWhenNotPaused(PAUSED_DEPOSITS) nonReentrant returns (uint256 shares)";") external onlyWhenNotPaused(PAUSED_DEPOSITS)  returns (uint256 shares)";False;""
src/contracts/core/StrategyManager.sol;141;") external onlyWhenNotPaused(PAUSED_DEPOSITS) nonReentrant returns (uint256 shares)";") external  nonReentrant returns (uint256 shares)";False;""
src/contracts/core/StrategyManager.sol;141;") external onlyWhenNotPaused(PAUSED_DEPOSITS) nonReentrant returns (uint256 shares)";") external onlyWhenNotPaused(PAUSED_DEPOSITS)  returns (uint256 shares)";False;""
src/contracts/core/StrategyManager.sol;146;"expiry >= block.timestamp";"expiry < block.timestamp";False;""
src/contracts/core/StrategyManager.sol;151;"nonce + 1";"nonce - 1";False;""
src/contracts/core/StrategyManager.sol;174;") external onlyDelegationManager";") external";False;""
src/contracts/core/StrategyManager.sol;184;") external onlyDelegationManager";") external";False;""
src/contracts/core/StrategyManager.sol;194;") external onlyDelegationManager";") external";False;""
src/contracts/core/StrategyManager.sol;208;") external onlyStrategyWhitelister";") external";False;""
src/contracts/core/StrategyManager.sol;216;"function setStrategyWhitelister(address newStrategyWhitelister) external onlyOwner";"function setStrategyWhitelister(address newStrategyWhitelister) external";False;""
src/contracts/core/StrategyManager.sol;228;") external onlyStrategyWhitelister";") external";False;""
src/contracts/core/StrategyManager.sol;230;"strategiesToWhitelist.length == thirdPartyTransfersForbiddenValues.length";"strategiesToWhitelist.length != thirdPartyTransfersForbiddenValues.length";False;""
src/contracts/core/StrategyManager.sol;236;"!strategyIsWhitelistedForDeposit[strategiesToWhitelist[i]]";"strategyIsWhitelistedForDeposit[strategiesToWhitelist[i]]";False;""
src/contracts/core/StrategyManager.sol;253;") external onlyStrategyWhitelister";") external";False;""
src/contracts/core/StrategyManager.sol;283;"staker != address(0)";"staker == address(0)";False;""
src/contracts/core/StrategyManager.sol;284;"shares != 0";"shares == 0";False;""
src/contracts/core/StrategyManager.sol;287;"stakerStrategyShares[staker][strategy] == 0";"stakerStrategyShares[staker][strategy] != 0";False;""
src/contracts/core/StrategyManager.sol;289;"stakerStrategyList[staker].length < MAX_STAKER_STRATEGY_LIST_LENGTH";"stakerStrategyList[staker].length > MAX_STAKER_STRATEGY_LIST_LENGTH";False;""
src/contracts/core/StrategyManager.sol;296;"stakerStrategyShares[staker][strategy] += shares";"stakerStrategyShares[staker][strategy] -= shares";False;""
src/contracts/core/StrategyManager.sol;315;") internal onlyStrategiesWhitelistedForDeposit(strategy) returns (uint256 shares)";") internal  returns (uint256 shares)";False;""
src/contracts/core/StrategyManager.sol;345;"shareAmount != 0";"shareAmount == 0";False;""
src/contracts/core/StrategyManager.sol;350;"shareAmount <= userShares";"shareAmount > userShares";False;""
src/contracts/core/StrategyManager.sol;353;"userShares - shareAmount";"userShares + shareAmount";False;""
src/contracts/core/StrategyManager.sol;360;"userShares == 0";"userShares != 0";False;""
src/contracts/core/StrategyManager.sol;383;"stakerStrategyList[staker][j] == strategy";"stakerStrategyList[staker][j] != strategy";False;""
src/contracts/core/StrategyManager.sol;386;"stakerStrategyList[staker].length - 1";"stakerStrategyList[staker].length + 1";False;""
src/contracts/core/StrategyManager.sol;393;"j != stratsLength";"j == stratsLength";False;""
src/contracts/core/StrategyManager.sol;447;"block.chainid == ORIGINAL_CHAIN_ID";"block.chainid != ORIGINAL_CHAIN_ID";False;""
src/contracts/core/StrategyManager.sol;39;"msg.sender == strategyWhitelister";"msg.sender != strategyWhitelister";True;""
src/contracts/core/DelegationManager.sol;23;"uint8 internal constant PAUSED_NEW_DELEGATION = 0;";"uint8 internal constant PAUSED_NEW_DELEGATION = 1;";False;""
src/contracts/core/DelegationManager.sol;26;"uint8 internal constant PAUSED_ENTER_WITHDRAWAL_QUEUE = 1;";"uint8 internal constant PAUSED_ENTER_WITHDRAWAL_QUEUE = 2;";False;""
src/contracts/core/DelegationManager.sol;29;"uint8 internal constant PAUSED_EXIT_WITHDRAWAL_QUEUE = 2;";"uint8 internal constant PAUSED_EXIT_WITHDRAWAL_QUEUE = 3;";False;""
src/contracts/core/DelegationManager.sol;35;"(180 days) / 12";"(180 days) * 12";False;""
src/contracts/core/DelegationManager.sol;76;") external initializer";") external";False;""
src/contracts/core/DelegationManager.sol;181;"stakerSignatureAndExpiry.expiry >= block.timestamp";"stakerSignatureAndExpiry.expiry < block.timestamp";False;""
src/contracts/core/DelegationManager.sol;196;"currentStakerNonce + 1";"currentStakerNonce - 1";False;""
src/contracts/core/DelegationManager.sol;211;"function undelegate(address staker) external onlyWhenNotPaused(PAUSED_ENTER_WITHDRAWAL_QUEUE) returns (bytes32[] memory withdrawalRoots)";"function undelegate(address staker) external  returns (bytes32[] memory withdrawalRoots)";False;""
src/contracts/core/DelegationManager.sol;214;"staker != address(0)";"staker == address(0)";False;""
src/contracts/core/DelegationManager.sol;228;"msg.sender != staker";"msg.sender == staker";False;""
src/contracts/core/DelegationManager.sol;237;"strategies.length == 0";"strategies.length != 0";False;""
src/contracts/core/DelegationManager.sol;269;") external onlyWhenNotPaused(PAUSED_ENTER_WITHDRAWAL_QUEUE) returns (bytes32[] memory)";") external  returns (bytes32[] memory)";False;""
src/contracts/core/DelegationManager.sol;274;"queuedWithdrawalParams[i].strategies.length == queuedWithdrawalParams[i].shares.length";"queuedWithdrawalParams[i].strategies.length != queuedWithdrawalParams[i].shares.length";False;""
src/contracts/core/DelegationManager.sol;275;"queuedWithdrawalParams[i].withdrawer == msg.sender";"queuedWithdrawalParams[i].withdrawer != msg.sender";False;""
src/contracts/core/DelegationManager.sol;310;") external onlyWhenNotPaused(PAUSED_EXIT_WITHDRAWAL_QUEUE) nonReentrant";") external onlyWhenNotPaused(PAUSED_EXIT_WITHDRAWAL_QUEUE)";False;""
src/contracts/core/DelegationManager.sol;310;") external onlyWhenNotPaused(PAUSED_EXIT_WITHDRAWAL_QUEUE) nonReentrant";") external  nonReentrant";False;""
src/contracts/core/DelegationManager.sol;328;") external onlyWhenNotPaused(PAUSED_EXIT_WITHDRAWAL_QUEUE) nonReentrant";") external onlyWhenNotPaused(PAUSED_EXIT_WITHDRAWAL_QUEUE)";False;""
src/contracts/core/DelegationManager.sol;328;") external onlyWhenNotPaused(PAUSED_EXIT_WITHDRAWAL_QUEUE) nonReentrant";") external  nonReentrant";False;""
src/contracts/core/DelegationManager.sol;347;") external onlyStrategyManagerOrEigenPodManager";") external";False;""
src/contracts/core/DelegationManager.sol;370;") external onlyStrategyManagerOrEigenPodManager";") external";False;""
src/contracts/core/DelegationManager.sol;389;"function setMinWithdrawalDelayBlocks(uint256 newMinWithdrawalDelayBlocks) external onlyOwner";"function setMinWithdrawalDelayBlocks(uint256 newMinWithdrawalDelayBlocks) external";False;""
src/contracts/core/DelegationManager.sol;403;") external onlyOwner";") external";False;""
src/contracts/core/DelegationManager.sol;418;"newOperatorDetails.stakerOptOutWindowBlocks <= MAX_STAKER_OPT_OUT_WINDOW_BLOCKS";"newOperatorDetails.stakerOptOutWindowBlocks > MAX_STAKER_OPT_OUT_WINDOW_BLOCKS";False;""
src/contracts/core/DelegationManager.sol;422;"newOperatorDetails.stakerOptOutWindowBlocks >= _operatorDetails[operator].stakerOptOutWindowBlocks";"newOperatorDetails.stakerOptOutWindowBlocks < _operatorDetails[operator].stakerOptOutWindowBlocks";False;""
src/contracts/core/DelegationManager.sol;447;") internal onlyWhenNotPaused(PAUSED_NEW_DELEGATION)";") internal";False;""
src/contracts/core/DelegationManager.sol;455;"msg.sender != operator";"msg.sender == operator";False;""
src/contracts/core/DelegationManager.sol;455;"_delegationApprover != address(0) && msg.sender != _delegationApprover && msg.sender != operator";"_delegationApprover != address(0) || msg.sender != _delegationApprover || msg.sender != operator";False;""
src/contracts/core/DelegationManager.sol;458;"approverSignatureAndExpiry.expiry >= block.timestamp";"approverSignatureAndExpiry.expiry < block.timestamp";False;""
src/contracts/core/DelegationManager.sol;522;"withdrawal.startBlock + minWithdrawalDelayBlocks <= block.number";"withdrawal.startBlock + minWithdrawalDelayBlocks > block.number";False;""
src/contracts/core/DelegationManager.sol;522;"withdrawal.startBlock + minWithdrawalDelayBlocks";"withdrawal.startBlock - minWithdrawalDelayBlocks";False;""
src/contracts/core/DelegationManager.sol;527;"msg.sender == withdrawal.withdrawer";"msg.sender != withdrawal.withdrawer";False;""
src/contracts/core/DelegationManager.sol;531;"receiveAsTokens";"!receiveAsTokens";False;""
src/contracts/core/DelegationManager.sol;533;"tokens.length == withdrawal.strategies.length";"tokens.length != withdrawal.strategies.length";False;""
src/contracts/core/DelegationManager.sol;543;"receiveAsTokens";"!receiveAsTokens";False;""
src/contracts/core/DelegationManager.sol;546;"withdrawal.startBlock + strategyWithdrawalDelayBlocks[withdrawal.strategies[i]]";"withdrawal.startBlock - strategyWithdrawalDelayBlocks[withdrawal.strategies[i]]";False;""
src/contracts/core/DelegationManager.sol;546;"withdrawal.startBlock + strategyWithdrawalDelayBlocks[withdrawal.strategies[i]] <= block.number";"withdrawal.startBlock + strategyWithdrawalDelayBlocks[withdrawal.strategies[i]] > block.number";False;""
src/contracts/core/DelegationManager.sol;564;"withdrawal.startBlock + strategyWithdrawalDelayBlocks[withdrawal.strategies[i]] <= block.number";"withdrawal.startBlock + strategyWithdrawalDelayBlocks[withdrawal.strategies[i]] > block.number";False;""
src/contracts/core/DelegationManager.sol;564;"withdrawal.startBlock + strategyWithdrawalDelayBlocks[withdrawal.strategies[i]]";"withdrawal.startBlock - strategyWithdrawalDelayBlocks[withdrawal.strategies[i]]";False;""
src/contracts/core/DelegationManager.sol;571;"withdrawal.strategies[i] == beaconChainETHStrategy";"withdrawal.strategies[i] != beaconChainETHStrategy";False;""
src/contracts/core/DelegationManager.sol;583;"podOwnerOperator != address(0)";"podOwnerOperator == address(0)";False;""
src/contracts/core/DelegationManager.sol;595;"currentOperator != address(0)";"currentOperator == address(0)";False;""
src/contracts/core/DelegationManager.sol;614;"operatorShares[operator][strategy] += shares";"operatorShares[operator][strategy] -= shares";False;""
src/contracts/core/DelegationManager.sol;621;"operatorShares[operator][strategy] -= shares";"operatorShares[operator][strategy] += shares";False;""
src/contracts/core/DelegationManager.sol;637;"staker != address(0)";"staker == address(0)";False;""
src/contracts/core/DelegationManager.sol;638;"strategies.length != 0";"strategies.length == 0";False;""
src/contracts/core/DelegationManager.sol;644;"operator != address(0)";"operator == address(0)";False;""
src/contracts/core/DelegationManager.sol;654;"strategies[i] == beaconChainETHStrategy";"strategies[i] != beaconChainETHStrategy";False;""
src/contracts/core/DelegationManager.sol;702;"strategy == beaconChainETHStrategy";"strategy != beaconChainETHStrategy";False;""
src/contracts/core/DelegationManager.sol;766;"block.chainid == ORIGINAL_CHAIN_ID";"block.chainid != ORIGINAL_CHAIN_ID";False;""
src/contracts/core/DelegationManager.sol;831;"podShares <= 0";"podShares > 0";False;""
src/contracts/core/DelegationManager.sol;838;"strategyManagerStrats.length == 0";"strategyManagerStrats.length != 0";False;""
src/contracts/core/DelegationManager.sol;848;"strategyManagerStrats.length + 1";"strategyManagerStrats.length - 1";False;""
src/contracts/core/DelegationManager.sol;860;"strategies.length - 1";"strategies.length + 1";False;""
src/contracts/core/DelegationManager.sol;861;"strategies.length - 1";"strategies.length + 1";False;""
src/contracts/core/DelegationManager.sol;715;"_minWithdrawalDelayBlocks <= MAX_WITHDRAWAL_DELAY_BLOCKS";"_minWithdrawalDelayBlocks > MAX_WITHDRAWAL_DELAY_BLOCKS";True;""
src/contracts/core/DelegationManager.sol;731;"_strategies.length == _withdrawalDelayBlocks.length";"_strategies.length != _withdrawalDelayBlocks.length";True;""
src/contracts/core/DelegationManager.sol;740;"newStrategyWithdrawalDelayBlocks <= MAX_WITHDRAWAL_DELAY_BLOCKS";"newStrategyWithdrawalDelayBlocks > MAX_WITHDRAWAL_DELAY_BLOCKS";True;"test_Revert_WhenExitWithdrawalQueuePaused(), test_Revert_WhenInvalidWithdrawalRoot(), test_Revert_WhenNotCalledByWithdrawer(), test_Revert_WhenTokensArrayLengthMismatch(), test_Revert_WhenWithdrawalDelayBlocksNotPassed(uint256[], bool), test_Revert_WhenWithdrawalDelayBlocksNotPassed_BeaconStrat(uint256, uint256, uint256), test_completeQueuedWithdrawal_SingleStratWithdrawAsShares(address, uint256, uint256), test_completeQueuedWithdrawal_SingleStratWithdrawAsTokens(address, uint256, uint256)"
src/contracts/core/DelegationManager.sol;876;"currWithdrawalDelay > withdrawalDelay";"currWithdrawalDelay < withdrawalDelay";True;"test_Revert_WhenInvalidWithdrawalRoot(), test_completeQueuedWithdrawal_SingleStratWithdrawAsShares(address, uint256, uint256), test_completeQueuedWithdrawal_SingleStratWithdrawAsTokens(address, uint256, uint256)"